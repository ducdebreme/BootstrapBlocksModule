<?php
//Includes
include('includes/admin.inc');

/**
 * Implements hook_menu
 */
function BootstrapBlocks_menu_menu() {
  $items = array();
  $items['admin/appearance/bootstrapblocks/menu'] = array(
    'title' => t('Menu Settings'),
    'page arguments' => array(3),
    'access arguments' => array('administer themes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('BootstrapBlocks_menu_settings_form'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function BootstrapBlocks_menu_block_info() {
  $blocks = array();

  for ($i = 0; $i <= variable_get('menu_block_count'); $i++) {
    $blocks['standard_menu_'.$i] = array(
      'info' => t('Bootstrap Menu '.($i + 1)),
    );
  }

  for($i = 0; $i <= variable_get('mobile_menu_block_count'); $i++) {
    $blocks['mobile_menu_'.$i] = array(
      'info' => t('Mobile Menu '.($i + 1)),
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function BootstrapBlocks_menu_block_view($delta = '') {
  $block = array();
  $block['subject'] = t('');

  //If this is the mobile menu..
  if (strpos($delta, 'mobile') !== false) {
    $block['content'] = drupal_get_form('bootstrapblocks_menu_select_menu_form', variable_get($delta.'_menu'));
  }
  else {
    $block['content'] = BootstrapBlocks_menu_build_menu(variable_get($delta.'_menu', 'main-menu'), $delta);
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function BootstrapBlocks_menu_block_configure($delta = '') {
  $form = array();

  //Grab the menus within the system, and put them in an array we can use
  $menus = menu_get_names();
  $menu_options = array();

  foreach ($menus as $menu) {
    $menu_options[$menu] = $menu;
  }

  $form[$delta.'_menu'] = array(
    '#type' => 'select',
    '#title' => t('Source Menu'),
    '#options' => $menu_options,
    '#default_value' => variable_get($delta.'_menu'),
  );
  $form[$delta.'_icons'] = array(
    '#type' => 'textarea',
    '#title' => t('Icons'),
    '#default_value' => variable_get($delta.'_icons'),
    '#description' => t('Determines what icon should be printed before each menu item in  based off of the menu items title. (For example: My Menu Link Title | icon-class-preset)'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function BootstrapBlocks_menu_block_save($delta, $edit) {
  variable_set($delta.'_icons', $edit[$delta.'_icons']);
  variable_set($delta.'_menu', $edit[$delta.'_menu']);
}

/**
 * Build a menu
 * @param $menu_name
 *   Name of menu to pull from Drupal/build
 * @param $block_name
 *   Name of block that the menu will belong too
 */
function BootstrapBlocks_menu_build_menu($menu_name, $block_name = '') {
  $menu = menu_tree_all_data($menu_name);

  //Allow the i18n module to translate
  if (module_exists('i18n_menu')) {
    $menu = i18n_menu_localize_tree($menu);
  }

  return theme('standard_menu', array(
    'menu' => $menu,
    'block_name' => $block_name
  ));
}

/**
 * Returns TRUE if passed in path is current path
 * @params $path
 *   Path to check against the current path
 * @return
 *   BOOL TRUE or FALSE value, indicating whether or not the current menu item is active
 */
function BootstrapBlocks_menu_is_active($path) {
  if ($path == $_GET['q'] || (drupal_is_front_page() && $path === '<front>')) {
    return TRUE;
  }
  
  foreach (menu_get_active_trail() as $key => $link) {
    if ($path === $link['href'] && $key !== 0) {
      return TRUE;
    } 
  }

  return FALSE;
}

/**
 * Returns html icon for an menu link
 * @param $link_title
 *   Title of the link to grab the icon for
 * @param $block_name
 *   Name of block to get the icon settings from
 * @return
 *   HTML for the icon from the passed-in $link_title
 * 
 * Makes use of list_extract_allowed_values() from the field_list module
 */
function BootstrapBlocks_menu_get_link_icon($link_title, $block_name = '') {
  $icons = variable_get($block_name.'_icons');
  $icons_array = list_extract_allowed_values($icons, 'list_text', FALSE);

  $icon = '';
  if (isset($icons_array[$link_title])) {
    $icon = '<i class="'.$icons_array[$link_title].'"></i>';
  }

  return $icon;
}

/**
 * Returns list HTML for a link
 * @param $menu_item
 *   The menu item returned from menu_tree_all_data
 * @param $block_name
 *   The name of the block this menu belongs too
 */
function BootstrapBlocks_print_menu_items($menu_item, $block_name, $index = 1) {
  //Make sure this isn't a disabled item, if it's not build the list element and any sub list elements up to $index 2
  if ($menu_item['link']['hidden'] != 1) {

    //Assemble the classes
    $classes = '';
    if (!empty($menu_item['below'])) { $classes .= 'dropdown'; }
    if ($index == 2) { $classes .= '-submenu'; }
    if (BootstrapBlocks_menu_is_active($menu_item['link']['link_path'])) { $classes .= ' active'; }

    $output = '<li class="'.$classes.'">';
    $output .= l(t('!icon '.$menu_item['link']['link_title'].' !caret', array('!caret' => (!empty($menu_item['below']) && $index == 1 ? '<b class="caret"></b>' : ''), '!icon' => BootstrapBlocks_menu_get_link_icon($menu_item['link']['link_title'], $block_name))), $menu_item['link']['link_path'], 
        array(
          'html' => TRUE,
          'attributes' => array(
            'class' => (!empty($menu_item['below']) && $index == 1 ? array('dropdown-toggle') : array()),
            'data-toggle' => (!empty($menu_item['below']) && $index == 1 ? 'dropdown' : ''),
          ),
        ));
        if (!empty($menu_item['below']) && $index < 3) {
          $output .= BootstrapBlocks_print_submenu_items($menu_item['below'], $block_name, ($index + 1));
        }
    $output .= '</li>';
    return $output;
  }
}

/**
 * Returns HTML for a dropdown menu ul
 * @param $menu_item
 *   The menu item below returned from menu_tree_all_data
 * @param $block_name
 *   The name of the block this menu belongs too
 * @param $index
 *   Int telling us what level we are on
 */
function BootstrapBlocks_print_submenu_items($menu_item, $block_name, $index = 1) {
  $output = '<ul class="dropdown-menu" role="menu">';
  foreach($menu_item as $submenu_item) {
    $output .= BootstrapBlocks_print_menu_items($submenu_item, $block_name, $index);
  }
  $output .= '</ul>';

  return $output;
}

/**
 * Recursive menu builder utility function.
 * @param $menu 
 *   Menu tree or subtree.
 * @param &$select
 *   Array of elements on which to append menu items.
 * @param $separator
 *   String repeated $depth times before each link title.
 * @param $depth
 *   Current depth - for recursion.
 **/
function BootstrapBlocks_menu_mobile_menu_build($menu, &$select = array(), $separator = "- ", $depth = 0) {
  foreach ($menu as $item) {
    $select[url($item['link']['link_path'])] = str_repeat($separator, $depth) . $item['link']['link_title'];
    if (!empty($item['below'])) {
      BootstrapBlocks_menu_mobile_menu_build($item['below'], $select, $separator, $depth + 1);
    }
  }
};

/**
 * Implements hook_form
 * Form for the select list menu
 * @param $menu_name
 *   Name of menu to print as a select list
 */
function BootstrapBlocks_menu_select_menu_form($form, &$form_state, $menu_name) {
  //Grab the menu items for the passed in menu name
  $menu =  menu_tree_all_data($menu_name);

  //Allow the i18n module to translate
  if (module_exists('i18n_menu')) {
    $menu = i18n_menu_localize_tree($menu);
  }

  //Construct a select list for the form
  $select = array();
  $select[''] = t('Go to...');
  BootstrapBlocks_menu_mobile_menu_build($menu, $select);

  //Add the javascript to handle the on-click events
  drupal_add_js('
    jQuery(document).ready(function () {
      jQuery(".mobile-select-menu select").change(function() {
        window.location = jQuery(this).find("option:selected").val();
      });
    });',
    array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5
    )
  );

  $trail = menu_get_active_trail();
  $value = FALSE;
  if (!empty($trail)) {
    $active = array_pop($trail);
    if (!empty($active)) {
      $active_path = url($active['link_path']);
      foreach ($select as $key => $link) {
        if ($key === $active_path) {
          $value = $key;
          break;
        }
      }
    }
  }

  //Construct the form
  $form['#attributes'] = array(
    'class' => array('mobile-select-menu'),
  );
  $form['select'] = array(
    '#value' => $value,
    '#type' => 'select',
    '#options' => $select,
  );

  return $form;
}

/**
 * Implimenting hook_theme();
 */
function BootstrapBlocks_menu_theme() {
  return array(
    'standard_menu' => array(
      'template' => 'templates/standard_menu',
      'variables' => array(
        'menu' => '',
        'block_name' => '',
      ),
    ),
  );
}
